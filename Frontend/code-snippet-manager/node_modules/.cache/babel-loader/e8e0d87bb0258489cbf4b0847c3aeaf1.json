{"ast":null,"code":"import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\nvar composeSignals = function composeSignals(signals, timeout) {\n  var _signals = signals = signals ? signals.filter(Boolean) : [],\n    length = _signals.length;\n  if (timeout || length) {\n    var controller = new AbortController();\n    var aborted;\n    var onabort = function onabort(reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        var err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    };\n    var timer = timeout && setTimeout(function () {\n      timer = null;\n      onabort(new AxiosError(\"timeout \".concat(timeout, \" of ms exceeded\"), AxiosError.ETIMEDOUT));\n    }, timeout);\n    var unsubscribe = function unsubscribe() {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(function (signal) {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    };\n    signals.forEach(function (signal) {\n      return signal.addEventListener('abort', onabort);\n    });\n    var signal = controller.signal;\n    signal.unsubscribe = function () {\n      return utils.asap(unsubscribe);\n    };\n    return signal;\n  }\n};\nexport default composeSignals;","map":null,"metadata":{},"sourceType":"module"}