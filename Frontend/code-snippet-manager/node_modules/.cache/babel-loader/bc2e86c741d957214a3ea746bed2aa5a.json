{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\JamesOrban\\\\Desktop\\\\SmartCodeHub\\\\Frontend\\\\code-snippet-manager\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _toArray from \"C:\\\\Users\\\\JamesOrban\\\\Desktop\\\\SmartCodeHub\\\\Frontend\\\\code-snippet-manager\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toArray\";\nimport platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\nexport default (function (config) {\n  var newConfig = mergeConfig({}, config);\n  var data = newConfig.data,\n    withXSRFToken = newConfig.withXSRFToken,\n    xsrfHeaderName = newConfig.xsrfHeaderName,\n    xsrfCookieName = newConfig.xsrfCookieName,\n    headers = newConfig.headers,\n    auth = newConfig.auth;\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' + btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : '')));\n  }\n  var contentType;\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      var _ref = contentType ? contentType.split(';').map(function (token) {\n          return token.trim();\n        }).filter(Boolean) : [],\n        _ref2 = _toArray(_ref),\n        type = _ref2[0],\n        tokens = _ref2.slice(1);\n      headers.setContentType([type || 'multipart/form-data'].concat(_toConsumableArray(tokens)).join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {\n      // Add xsrf header\n      var xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n  return newConfig;\n});","map":null,"metadata":{},"sourceType":"module"}