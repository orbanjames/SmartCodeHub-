{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import \"../Api\";\n// import axios from \"axios\";\n// import \"../styles.css\";\n\n// const SnippetListPage = () => {\n//   const [snippets, setSnippets] = useState([]);\n//   const [newSnippet, setNewSnippet] = useState({\n//     title: \"\",\n//     code: \"\",\n//     description: \"\",\n//     language: \"\",\n//     tags: [],\n//   });\n\n//   // Fetch all snippets from the backend\n//   useEffect(() => {\n//     axios\n//       .get(\"http://localhost:8000/api/snippets/\")\n//       .then((response) => setSnippets(response.data))\n//       .catch((error) => console.error(\"Error fetching snippets:\", error));\n//   }, []);\n\n//   // Handle create new snippetets/\n//   const handleCreateSnippet = async () => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/snippets/\",\n//         newSnippet\n//       );\n//       setSnippets([...snippets, response.data]);\n//       setNewSnippet({\n//         title: \"\",\n//         code: \"\",\n//         description: \"\",\n//         language: \"\",\n//         tags: [],\n//       }); // reset form\n//     } catch (error) {\n//       console.error(\"Error creating snippet:\", error);\n//     }\n//   };\n\n//   // Handle delete snippet\n//   const handleDeleteSnippet = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:8000/api/snippets/${id}/`);\n//       setSnippets(snippets.filter((snippet) => snippet.id !== id));\n//     } catch (error) {\n//       console.error(\"Error deleting snippet:\", error);\n//     }\n//   };\n\n//   // Handle update snippet\n//   const handleUpdateSnippet = async (id, updatedSnippet) => {\n//     try {\n//       const response = await axios.put(\n//         `http://localhost:8000/api/snippets/${id}/`,\n//         updatedSnippet\n//       );\n//       setSnippets(\n//         snippets.map((snippet) => (snippet.id === id ? response.data : snippet))\n//       );\n//     } catch (error) {\n//       console.error(\"Error updating snippet:\", error);\n//     }\n//   };\n\n//   // Handle tag generation (connected to the backend logic)\n//   const handleTagGeneration = async (snippetCode) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/api/generate-tags/\",\n//         { code: snippetCode }\n//       );\n//       setNewSnippet((prevState) => ({ ...prevState, tags: response.data }));\n//     } catch (error) {\n//       console.error(\"Error generating tags:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className='snippet-list-page'>\n//       <h1>Code Snippets</h1>\n\n//       <div className='new-snippet-form'>\n//         <textarea\n//           value={newSnippet.code}\n//           onChange={(e) =>\n//             setNewSnippet({ ...newSnippet, code: e.target.value })\n//           }\n//           placeholder='Enter your code here'\n//         />\n//         <input\n//           type='text'\n//           value={newSnippet.description}\n//           onChange={(e) =>\n//             setNewSnippet({ ...newSnippet, description: e.target.value })\n//           }\n//           placeholder='Enter description'\n//         />\n//         <input\n//           type='text'\n//           value={newSnippet.title}\n//           onChange={(e) =>\n//             setNewSnippet({ ...newSnippet, title: e.target.value })\n//           }\n//           placeholder='Enter title'\n//         />\n//         <input\n//           type='text'\n//           value={newSnippet.language}\n//           onChange={(e) =>\n//             setNewSnippet({ ...newSnippet, language: e.target.value })\n//           }\n//           placeholder='Enter language'\n//         />\n//         <button onClick={() => handleTagGeneration(newSnippet.code)}>\n//           Generate Tags\n//         </button>\n//         <button onClick={handleCreateSnippet}>Add Snippet</button>\n//       </div>\n\n//       <table className='snippet-table'>\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Description</th>\n//             <th>Code</th>\n//             <th>Language</th>\n//             <th>Tags</th>\n//             <th>Actions</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {snippets.map((snippet) => (\n//             <tr key={snippet.id}>\n//               <td>{snippet.title}</td>\n//               <td>{snippet.description}</td>\n//               <td>{snippet.code}</td>\n//               <td>{snippet.language}</td>\n//               <td>{snippet.tags.join(\", \")}</td>\n//               <td>\n//                 <button\n//                   onClick={() =>\n//                     handleUpdateSnippet(snippet.id, {\n//                       title: snippet.title,\n//                       description: snippet.description,\n//                       code: snippet.code,\n//                       language: snippet.language,\n//                     })\n//                   }\n//                 >\n//                   Update\n//                 </button>\n//                 <button onClick={() => handleDeleteSnippet(snippet.id)}>\n//                   Delete\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n//     </div>\n//   );\n// };\n\n// export default SnippetListPage;","map":{"version":3,"names":[],"sources":["C:/Users/JamesOrban/Desktop/SmartCodeHub/Frontend/code-snippet-manager/src/components/SnippetList.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import \"../Api\";\r\n// import axios from \"axios\";\r\n// import \"../styles.css\";\r\n\r\n// const SnippetListPage = () => {\r\n//   const [snippets, setSnippets] = useState([]);\r\n//   const [newSnippet, setNewSnippet] = useState({\r\n//     title: \"\",\r\n//     code: \"\",\r\n//     description: \"\",\r\n//     language: \"\",\r\n//     tags: [],\r\n//   });\r\n\r\n//   // Fetch all snippets from the backend\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\"http://localhost:8000/api/snippets/\")\r\n//       .then((response) => setSnippets(response.data))\r\n//       .catch((error) => console.error(\"Error fetching snippets:\", error));\r\n//   }, []);\r\n\r\n//   // Handle create new snippetets/\r\n//   const handleCreateSnippet = async () => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8000/api/snippets/\",\r\n//         newSnippet\r\n//       );\r\n//       setSnippets([...snippets, response.data]);\r\n//       setNewSnippet({\r\n//         title: \"\",\r\n//         code: \"\",\r\n//         description: \"\",\r\n//         language: \"\",\r\n//         tags: [],\r\n//       }); // reset form\r\n//     } catch (error) {\r\n//       console.error(\"Error creating snippet:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle delete snippet\r\n//   const handleDeleteSnippet = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:8000/api/snippets/${id}/`);\r\n//       setSnippets(snippets.filter((snippet) => snippet.id !== id));\r\n//     } catch (error) {\r\n//       console.error(\"Error deleting snippet:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle update snippet\r\n//   const handleUpdateSnippet = async (id, updatedSnippet) => {\r\n//     try {\r\n//       const response = await axios.put(\r\n//         `http://localhost:8000/api/snippets/${id}/`,\r\n//         updatedSnippet\r\n//       );\r\n//       setSnippets(\r\n//         snippets.map((snippet) => (snippet.id === id ? response.data : snippet))\r\n//       );\r\n//     } catch (error) {\r\n//       console.error(\"Error updating snippet:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Handle tag generation (connected to the backend logic)\r\n//   const handleTagGeneration = async (snippetCode) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8000/api/generate-tags/\",\r\n//         { code: snippetCode }\r\n//       );\r\n//       setNewSnippet((prevState) => ({ ...prevState, tags: response.data }));\r\n//     } catch (error) {\r\n//       console.error(\"Error generating tags:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className='snippet-list-page'>\r\n//       <h1>Code Snippets</h1>\r\n\r\n//       <div className='new-snippet-form'>\r\n//         <textarea\r\n//           value={newSnippet.code}\r\n//           onChange={(e) =>\r\n//             setNewSnippet({ ...newSnippet, code: e.target.value })\r\n//           }\r\n//           placeholder='Enter your code here'\r\n//         />\r\n//         <input\r\n//           type='text'\r\n//           value={newSnippet.description}\r\n//           onChange={(e) =>\r\n//             setNewSnippet({ ...newSnippet, description: e.target.value })\r\n//           }\r\n//           placeholder='Enter description'\r\n//         />\r\n//         <input\r\n//           type='text'\r\n//           value={newSnippet.title}\r\n//           onChange={(e) =>\r\n//             setNewSnippet({ ...newSnippet, title: e.target.value })\r\n//           }\r\n//           placeholder='Enter title'\r\n//         />\r\n//         <input\r\n//           type='text'\r\n//           value={newSnippet.language}\r\n//           onChange={(e) =>\r\n//             setNewSnippet({ ...newSnippet, language: e.target.value })\r\n//           }\r\n//           placeholder='Enter language'\r\n//         />\r\n//         <button onClick={() => handleTagGeneration(newSnippet.code)}>\r\n//           Generate Tags\r\n//         </button>\r\n//         <button onClick={handleCreateSnippet}>Add Snippet</button>\r\n//       </div>\r\n\r\n//       <table className='snippet-table'>\r\n//         <thead>\r\n//           <tr>\r\n//             <th>Title</th>\r\n//             <th>Description</th>\r\n//             <th>Code</th>\r\n//             <th>Language</th>\r\n//             <th>Tags</th>\r\n//             <th>Actions</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {snippets.map((snippet) => (\r\n//             <tr key={snippet.id}>\r\n//               <td>{snippet.title}</td>\r\n//               <td>{snippet.description}</td>\r\n//               <td>{snippet.code}</td>\r\n//               <td>{snippet.language}</td>\r\n//               <td>{snippet.tags.join(\", \")}</td>\r\n//               <td>\r\n//                 <button\r\n//                   onClick={() =>\r\n//                     handleUpdateSnippet(snippet.id, {\r\n//                       title: snippet.title,\r\n//                       description: snippet.description,\r\n//                       code: snippet.code,\r\n//                       language: snippet.language,\r\n//                     })\r\n//                   }\r\n//                 >\r\n//                   Update\r\n//                 </button>\r\n//                 <button onClick={() => handleDeleteSnippet(snippet.id)}>\r\n//                   Delete\r\n//                 </button>\r\n//               </td>\r\n//             </tr>\r\n//           ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SnippetListPage;\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module"}